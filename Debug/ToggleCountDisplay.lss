
ToggleCountDisplay.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000018c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000a  00800060  0000018c  00000200  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00000450  00000000  00000000  0000020c  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      000007d9  00000000  00000000  0000065c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec e8       	ldi	r30, 0x8C	; 140
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	aa 36       	cpi	r26, 0x6A	; 106
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
  76:	0e 94 81 00 	call	0x102	; 0x102 <main>
  7a:	0c 94 c4 00 	jmp	0x188	; 0x188 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <display_7segment>:
#include <avr/io.h>
#include <util/delay.h>

// Function to display numbers on the 7-segment display (common anode)
void display_7segment(uint8_t number)
{
  82:	df 93       	push	r29
  84:	cf 93       	push	r28
  86:	cd b7       	in	r28, 0x3d	; 61
  88:	de b7       	in	r29, 0x3e	; 62
  8a:	60 97       	sbiw	r28, 0x10	; 16
  8c:	0f b6       	in	r0, 0x3f	; 63
  8e:	f8 94       	cli
  90:	de bf       	out	0x3e, r29	; 62
  92:	0f be       	out	0x3f, r0	; 63
  94:	cd bf       	out	0x3d, r28	; 61
  96:	8b 87       	std	Y+11, r24	; 0x0b
        0b10010010, // 5
        0b10000010, // 6
        0b11111000, // 7
        0b10000000, // 8
        0b10010000  // 9
    };
  98:	ce 01       	movw	r24, r28
  9a:	01 96       	adiw	r24, 0x01	; 1
  9c:	9d 87       	std	Y+13, r25	; 0x0d
  9e:	8c 87       	std	Y+12, r24	; 0x0c
  a0:	e0 e6       	ldi	r30, 0x60	; 96
  a2:	f0 e0       	ldi	r31, 0x00	; 0
  a4:	ff 87       	std	Y+15, r31	; 0x0f
  a6:	ee 87       	std	Y+14, r30	; 0x0e
  a8:	fa e0       	ldi	r31, 0x0A	; 10
  aa:	f8 8b       	std	Y+16, r31	; 0x10
  ac:	ee 85       	ldd	r30, Y+14	; 0x0e
  ae:	ff 85       	ldd	r31, Y+15	; 0x0f
  b0:	00 80       	ld	r0, Z
  b2:	8e 85       	ldd	r24, Y+14	; 0x0e
  b4:	9f 85       	ldd	r25, Y+15	; 0x0f
  b6:	01 96       	adiw	r24, 0x01	; 1
  b8:	9f 87       	std	Y+15, r25	; 0x0f
  ba:	8e 87       	std	Y+14, r24	; 0x0e
  bc:	ec 85       	ldd	r30, Y+12	; 0x0c
  be:	fd 85       	ldd	r31, Y+13	; 0x0d
  c0:	00 82       	st	Z, r0
  c2:	8c 85       	ldd	r24, Y+12	; 0x0c
  c4:	9d 85       	ldd	r25, Y+13	; 0x0d
  c6:	01 96       	adiw	r24, 0x01	; 1
  c8:	9d 87       	std	Y+13, r25	; 0x0d
  ca:	8c 87       	std	Y+12, r24	; 0x0c
  cc:	98 89       	ldd	r25, Y+16	; 0x10
  ce:	91 50       	subi	r25, 0x01	; 1
  d0:	98 8b       	std	Y+16, r25	; 0x10
  d2:	e8 89       	ldd	r30, Y+16	; 0x10
  d4:	ee 23       	and	r30, r30
  d6:	51 f7       	brne	.-44     	; 0xac <display_7segment+0x2a>

    PORTA = segment_codes[number];
  d8:	ab e3       	ldi	r26, 0x3B	; 59
  da:	b0 e0       	ldi	r27, 0x00	; 0
  dc:	8b 85       	ldd	r24, Y+11	; 0x0b
  de:	28 2f       	mov	r18, r24
  e0:	30 e0       	ldi	r19, 0x00	; 0
  e2:	ce 01       	movw	r24, r28
  e4:	01 96       	adiw	r24, 0x01	; 1
  e6:	fc 01       	movw	r30, r24
  e8:	e2 0f       	add	r30, r18
  ea:	f3 1f       	adc	r31, r19
  ec:	80 81       	ld	r24, Z
  ee:	8c 93       	st	X, r24
}
  f0:	60 96       	adiw	r28, 0x10	; 16
  f2:	0f b6       	in	r0, 0x3f	; 63
  f4:	f8 94       	cli
  f6:	de bf       	out	0x3e, r29	; 62
  f8:	0f be       	out	0x3f, r0	; 63
  fa:	cd bf       	out	0x3d, r28	; 61
  fc:	cf 91       	pop	r28
  fe:	df 91       	pop	r29
 100:	08 95       	ret

00000102 <main>:

int main(void)
{
 102:	df 93       	push	r29
 104:	cf 93       	push	r28
 106:	00 d0       	rcall	.+0      	; 0x108 <main+0x6>
 108:	cd b7       	in	r28, 0x3d	; 61
 10a:	de b7       	in	r29, 0x3e	; 62
    uint8_t counter = 0;
 10c:	1a 82       	std	Y+2, r1	; 0x02
    uint8_t last_state = 0;
 10e:	19 82       	std	Y+1, r1	; 0x01

    // Configure Port A as output for 7-segment display
    DDRA = 0xFF;
 110:	ea e3       	ldi	r30, 0x3A	; 58
 112:	f0 e0       	ldi	r31, 0x00	; 0
 114:	8f ef       	ldi	r24, 0xFF	; 255
 116:	80 83       	st	Z, r24
    // Configure Port B as input for the toggle switch
    DDRB &= ~(1 << PINB0);
 118:	a7 e3       	ldi	r26, 0x37	; 55
 11a:	b0 e0       	ldi	r27, 0x00	; 0
 11c:	e7 e3       	ldi	r30, 0x37	; 55
 11e:	f0 e0       	ldi	r31, 0x00	; 0
 120:	80 81       	ld	r24, Z
 122:	8e 7f       	andi	r24, 0xFE	; 254
 124:	8c 93       	st	X, r24
    PORTB = 0xff;
 126:	e8 e3       	ldi	r30, 0x38	; 56
 128:	f0 e0       	ldi	r31, 0x00	; 0
 12a:	8f ef       	ldi	r24, 0xFF	; 255
 12c:	80 83       	st	Z, r24
    // Configure Port C as output for LED
    DDRC = (1 << PINC0);
 12e:	e4 e3       	ldi	r30, 0x34	; 52
 130:	f0 e0       	ldi	r31, 0x00	; 0
 132:	81 e0       	ldi	r24, 0x01	; 1
 134:	80 83       	st	Z, r24

    // Initialize the 7-segment display to show 0
    display_7segment(counter);
 136:	8a 81       	ldd	r24, Y+2	; 0x02
 138:	0e 94 41 00 	call	0x82	; 0x82 <display_7segment>
    while (1)
    {
        if (PINB == 0b11111110 && last_state == 0)
 13c:	e6 e3       	ldi	r30, 0x36	; 54
 13e:	f0 e0       	ldi	r31, 0x00	; 0
 140:	80 81       	ld	r24, Z
 142:	8e 3f       	cpi	r24, 0xFE	; 254
 144:	81 f4       	brne	.+32     	; 0x166 <main+0x64>
 146:	89 81       	ldd	r24, Y+1	; 0x01
 148:	88 23       	and	r24, r24
 14a:	69 f4       	brne	.+26     	; 0x166 <main+0x64>
        {
            counter++;
 14c:	8a 81       	ldd	r24, Y+2	; 0x02
 14e:	8f 5f       	subi	r24, 0xFF	; 255
 150:	8a 83       	std	Y+2, r24	; 0x02
            display_7segment(counter);
 152:	8a 81       	ldd	r24, Y+2	; 0x02
 154:	0e 94 41 00 	call	0x82	; 0x82 <display_7segment>
            PORTC = 1;
 158:	e5 e3       	ldi	r30, 0x35	; 53
 15a:	f0 e0       	ldi	r31, 0x00	; 0
 15c:	81 e0       	ldi	r24, 0x01	; 1
 15e:	80 83       	st	Z, r24
            last_state = 1;
 160:	81 e0       	ldi	r24, 0x01	; 1
 162:	89 83       	std	Y+1, r24	; 0x01
 164:	09 c0       	rjmp	.+18     	; 0x178 <main+0x76>

        }
        else if(PINB == 0b11111111){
 166:	e6 e3       	ldi	r30, 0x36	; 54
 168:	f0 e0       	ldi	r31, 0x00	; 0
 16a:	80 81       	ld	r24, Z
 16c:	8f 3f       	cpi	r24, 0xFF	; 255
 16e:	21 f4       	brne	.+8      	; 0x178 <main+0x76>
            last_state = 0;
 170:	19 82       	std	Y+1, r1	; 0x01
            PORTC = 0;
 172:	e5 e3       	ldi	r30, 0x35	; 53
 174:	f0 e0       	ldi	r31, 0x00	; 0
 176:	10 82       	st	Z, r1
        }
        if(9 == counter)
 178:	8a 81       	ldd	r24, Y+2	; 0x02
 17a:	89 30       	cpi	r24, 0x09	; 9
 17c:	f9 f6       	brne	.-66     	; 0x13c <main+0x3a>

        	while(1){PORTC = 1;}
 17e:	e5 e3       	ldi	r30, 0x35	; 53
 180:	f0 e0       	ldi	r31, 0x00	; 0
 182:	81 e0       	ldi	r24, 0x01	; 1
 184:	80 83       	st	Z, r24
 186:	fb cf       	rjmp	.-10     	; 0x17e <main+0x7c>

00000188 <_exit>:
 188:	f8 94       	cli

0000018a <__stop_program>:
 18a:	ff cf       	rjmp	.-2      	; 0x18a <__stop_program>
